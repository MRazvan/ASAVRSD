<UserControl x:Class="WatchViewer.View.WatchView"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
             xmlns:converters="clr-namespace:WatchViewer.Converters"
             xmlns:controls="clr-namespace:WatchViewer.Controls"
             xmlns:local="clr-namespace:WatchViewer.Models"
             mc:Ignorable="d"
             d:DesignHeight="300" d:DesignWidth="450" 
            >
    <UserControl.Resources>
        <converters:LevelToIndentConverter x:Key="LevelToIndentConverter" />
        <Style x:Key="ExpandCollapseToggleStyle" TargetType="{x:Type ToggleButton}">
            <Setter Property="UIElement.Focusable" Value="false" />
            <Setter Property="FrameworkElement.Width" Value="19" />
            <Setter Property="FrameworkElement.Height" Value="13" />
            <Setter Property="Control.Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type ToggleButton}">
                        <Border Width="19" Height="13" Background="Transparent">
                            <Border Width="9" Height="9" BorderThickness="1" BorderBrush="#FF7898B5" CornerRadius="1"
                                    SnapsToDevicePixels="true">
                                <Border.Background>
                                    <LinearGradientBrush StartPoint="0,0" EndPoint="1,1">
                                        <GradientBrush.GradientStops>
                                            <GradientStop Color="White" Offset=".2" />
                                            <GradientStop Color="#FFC0B7A6" Offset="1" />
                                        </GradientBrush.GradientStops>
                                    </LinearGradientBrush>
                                </Border.Background>
                                <Path x:Name="ExpandPath" Margin="1,1,1,1" Fill="Black"
                                      Data="M 0,2 L 0,3 2,3 2,5 3,5 3,3 5,3 5,2 3,2 3,0 2,0 2,2 Z" />
                            </Border>
                        </Border>
                        <ControlTemplate.Triggers>
                            <Trigger Property="ToggleButton.IsChecked" Value="True">
                                <Setter TargetName="ExpandPath" Property="Path.Data" Value="M 0,2 L 0,3 5,3 5,2 Z" />
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        <ControlTemplate x:Key="BorderlessButton" TargetType="{x:Type TextBox}">
            <Border Name="Bd" BorderThickness="{TemplateBinding Control.BorderThickness}"
                    BorderBrush="{TemplateBinding Control.BorderBrush}"
                    Background="{TemplateBinding Control.Background}" SnapsToDevicePixels="true">
                <ScrollViewer Name="PART_ContentHost" Background="{TemplateBinding Control.Background}"
                              SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}" />
            </Border>
            <ControlTemplate.Triggers>
                <Trigger Property="UIElement.IsEnabled" Value="false">
                    <Setter Property="Control.Background" Value="Transparent" />
                    <Setter Property="Control.BorderBrush" Value="Transparent" />
                </Trigger>
            </ControlTemplate.Triggers>
        </ControlTemplate>
    </UserControl.Resources>
    <controls:TreeListView VirtualizingPanel.IsVirtualizing="true" ItemsSource="{Binding Path=Locals}">
        <FrameworkElement.Resources>
            <DataTemplate x:Key="LocalVariableName" DataType="{x:Type local:WatchVariable}">
                <DockPanel>
                    <ToggleButton x:Name="Expander" Style="{StaticResource ExpandCollapseToggleStyle}"
                                  ClickMode="Press"
                                  Margin="{Binding Level, Converter={StaticResource LevelToIndentConverter}, RelativeSource={RelativeSource AncestorType={x:Type controls:TreeListViewItem}}}"
                                  IsChecked="{Binding Path=IsExpanded, RelativeSource={RelativeSource AncestorType={x:Type controls:TreeListViewItem}}}" />
                    <TextBox VerticalAlignment="Center" Foreground="{DynamicResource VsBrush.ToolWindowText}" Text="{Binding Name}" BorderThickness="0" />
                </DockPanel>
                <DataTemplate.Triggers>
                    <DataTrigger Value="False"
                                 Binding="{Binding Path=HasItems, RelativeSource={RelativeSource AncestorType={x:Type controls:TreeListViewItem}}}">
                        <Setter TargetName="Expander" Property="UIElement.Visibility" Value="Hidden" />
                    </DataTrigger>
                </DataTemplate.Triggers>
            </DataTemplate>
            <DataTemplate x:Key="LocalVariableValue" DataType="{x:Type local:WatchVariable}">
                <TextBlock VerticalAlignment="Center" TextTrimming="CharacterEllipsis"
                           Foreground="{DynamicResource VsBrush.ToolWindowText}" Text="{Binding Path=DisplayValue}" />
            </DataTemplate>
            <DataTemplate x:Key="LocalAddressValue" DataType="{x:Type local:WatchVariable}">
                <TextBlock VerticalAlignment="Center" TextTrimming="CharacterEllipsis"
                           Foreground="{DynamicResource VsBrush.ToolWindowText}" Text="{Binding Path=DisplayAddress, Mode=OneWay}" />
            </DataTemplate>
            <DataTemplate x:Key="LocalTypeValue" DataType="{x:Type local:WatchVariable}">
                <TextBlock VerticalAlignment="Center" TextTrimming="CharacterEllipsis"
                           Foreground="{DynamicResource VsBrush.ToolWindowText}" Text="{Binding Path=Type, Mode=OneWay}" />
            </DataTemplate>

            <GridViewColumnCollection x:Key="gvcc">
                <GridViewColumn Header="Name" CellTemplate="{StaticResource LocalVariableName}" Width="200" />
                <GridViewColumn Header="Value" CellTemplate="{StaticResource LocalVariableValue}" Width="75"/>
                <GridViewColumn Header="Address" CellTemplate="{StaticResource LocalAddressValue}" Width="75" />
                <GridViewColumn Header="Type" CellTemplate="{StaticResource LocalTypeValue}" Width="75" />
            </GridViewColumnCollection>

            <Style TargetType="{x:Type controls:TreeListView}">
                <Setter Property="Control.Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type controls:TreeListView}">
                            <Border BorderBrush="{TemplateBinding Control.BorderBrush}"
                                    BorderThickness="{TemplateBinding Control.BorderThickness}">
                                <DockPanel Background="{TemplateBinding Control.Background}">
                                    <GridViewHeaderRowPresenter Columns="{StaticResource gvcc}" DockPanel.Dock="Top" />
                                    <ScrollViewer VerticalScrollBarVisibility="Visible"
                                                  HorizontalScrollBarVisibility="Disabled"
                                                  Background="{TemplateBinding Control.Background}"
                                                  CanContentScroll="true">
                                        <ItemsPresenter />
                                    </ScrollViewer>
                                </DockPanel>
                            </Border>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>
            <Style TargetType="{x:Type controls:TreeListViewItem}">
                <EventSetter Event="Expanded" Handler="Peripheral_Expanded" />
                <Setter Property="TreeViewItem.IsExpanded"
                        Value="{Binding RelativeSource={RelativeSource Self}, Path=Header.IsExpanded, Mode=TwoWay}" />
                <Setter Property="TreeViewItem.IsSelected" Value="{Binding IsSelected, Mode=OneWay}" />
                <Setter Property="ItemsControl.ItemsSource" Value="{Binding Items, Mode=OneWay}" />
                <Setter Property="Control.Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type controls:TreeListViewItem}">
                            <StackPanel>
                                <StackPanel.ContextMenu>
                                    <ContextMenu>
                                        <MenuItem Header="test"></MenuItem>
                                    </ContextMenu>
                                </StackPanel.ContextMenu>
                                <Border Name="Bd" 
                                        Background="{TemplateBinding Control.Background}"
                                        BorderBrush="LightGray"
                                        BorderThickness="0, 0, 0, 1"
                                        Padding="{TemplateBinding Control.Padding}">
                                    <GridViewRowPresenter x:Name="PART_Header" Columns="{StaticResource gvcc}" Content="{Binding}" />
                                </Border>
                                <ItemsPresenter x:Name="ItemsHost" />
                            </StackPanel>
                            <ControlTemplate.Triggers>
                                <Trigger Property="TreeViewItem.IsExpanded" Value="false">
                                    <Setter TargetName="ItemsHost" Property="UIElement.Visibility" Value="Collapsed" />
                                </Trigger>
                                <MultiTrigger>
                                    <MultiTrigger.Conditions>
                                        <Condition Property="HeaderedItemsControl.HasHeader" Value="false" />
                                        <Condition Property="FrameworkElement.Width" Value="Auto" />
                                    </MultiTrigger.Conditions>
                                    <Setter TargetName="PART_Header" Property="FrameworkElement.MinWidth" Value="75" />
                                </MultiTrigger>
                                <MultiTrigger>
                                    <MultiTrigger.Conditions>
                                        <Condition Property="HeaderedItemsControl.HasHeader" Value="false" />
                                        <Condition Property="FrameworkElement.Height" Value="Auto" />
                                    </MultiTrigger.Conditions>
                                    <Setter TargetName="PART_Header" Property="FrameworkElement.MinHeight" Value="19" />
                                </MultiTrigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>
        </FrameworkElement.Resources>
    </controls:TreeListView>
</UserControl>